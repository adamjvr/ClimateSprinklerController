esphome:
  name: esp_thermostat_front_room
  platform: ESP32
  board: featheresp32
  includes: esp_thermostat.h
  on_boot:
  #   priority: 500
    then:
      - script.execute: display_on

wifi:
  ssid: "abcde12345"
  password: "abcde12345"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esp_thermostat_front_room"
    password: "W81pKxXbMA5c"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API and define services
api:
  password: "abcde12345"
  services:
    - service: set_display_page
      variables:
        page: int
      then:
        - lambda: 'esp32_thermostat::set_display_page(page);'
    - service: update_humidity
      variables:
        current: float
        bedroom: float
        front_room_nook: float
        front_room_table: float
        outside: float
      then:
        - globals.set:
            id: current_humidity
            value: !lambda 'return current;'
        - globals.set:
            id: bedroom_humidity
            value: !lambda 'return bedroom;'
        - globals.set:
            id: front_room_nook_humidity
            value: !lambda 'return front_room_nook;'
        - globals.set:
            id: front_room_table_humidity
            value: !lambda 'return front_room_table;'
        - globals.set:
            id: outside_humidity
            value: !lambda 'return outside;'
        - globals.set:
            id: missed_update_count
            value: '0'
        - component.update: main_lcd
    - service: update_temperature
      variables:
        current: float
        bedroom: float
        front_room_nook: float
        front_room_table: float
        outside: float
      then:
        - globals.set:
            id: current_temperature
            value: !lambda 'return current;'
        - globals.set:
            id: bedroom_temperature
            value: !lambda 'return bedroom;'
        - globals.set:
            id: front_room_nook_temperature
            value: !lambda 'return front_room_nook;'
        - globals.set:
            id: front_room_table_temperature
            value: !lambda 'return front_room_table;'
        - globals.set:
            id: outside_temperature
            value: !lambda 'return outside;'
        - globals.set:
            id: missed_update_count
            value: '0'
        - component.update: main_lcd

ota:
  password: "abcde12345"

globals:
  # the temperature/humidity that guides the thermostat controller
  - id: current_humidity
    type: float
    restore_value: yes
    initial_value: '0'
  - id: current_temperature
    type: float
    restore_value: yes
    initial_value: '-100'
  # selected display pages/items
  - id: selected_display_page
    type: int
    restore_value: no
    initial_value: '0'
  - id: selected_display_item
    type: int
    restore_value: no
    initial_value: '0'
  # last processed encoder value
  - id: encoder_value
    type: int
    restore_value: no
    initial_value: '0'
  # number of sensor updates while offline
  - id: missed_update_count
    type: int
    restore_value: no
    initial_value: '0'
  # ancillary humidities we may display
  - id: bedroom_humidity
    type: float
    restore_value: no
    initial_value: '0'
  - id: front_room_nook_humidity
    type: float
    restore_value: no
    initial_value: '0'
  - id: front_room_table_humidity
    type: float
    restore_value: no
    initial_value: '0'
  - id: outside_humidity
    type: float
    restore_value: no
    initial_value: '0'
  # ancillary temperatures we may display
  - id: bedroom_temperature
    type: float
    restore_value: no
    initial_value: '-100'
  - id: front_room_nook_temperature
    type: float
    restore_value: no
    initial_value: '-100'
  - id: front_room_table_temperature
    type: float
    restore_value: no
    initial_value: '-100'
  - id: outside_temperature
    type: float
    restore_value: no
    initial_value: '-100'
  # flag to indicate on-board sensor is in use
  - id: on_board_sensor_active
    type: bool
    restore_value: no
    initial_value: 'true'
  # flag to indicate template sensor is ready
  - id: sensor_ready
    type: bool
    restore_value: no
    initial_value: 'false'

script:
  # display screen management
  - id: button_press
    mode: restart
    then:
      - script.execute: display_on
      - delay: 60s
      - lambda: 'esp32_thermostat::set_display_page(esp32_thermostat::DisplayPageEnum::MAIN_SCREEN);'
  # display power management
  - id: display_on
    mode: restart
    then:
      - lambda: 'id(main_lcd)->turn_on();'
      - delay: 60s
      - lambda: |-
          id(main_lcd)->turn_off();

status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esptime

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22
  scan: True

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

climate:
  - platform: thermostat
    id: esp_thermostat
    name: "Front Room Thermostat"
    sensor: esp_thermostat_temperature_sensor
    hysteresis: 0.555555555555556
    visual:
      min_temperature: 60°F
      max_temperature: 90°F
      temperature_step: 1
    default_target_temperature_low: 72°F
    default_target_temperature_high: 75°F
    away_config:
      default_target_temperature_low: 68°F
      default_target_temperature_high: 78°F
    off_mode:
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_fan
      - lambda: |-
          id(esp_thermostat).fan_mode = climate::CLIMATE_FAN_AUTO;
    cool_action:
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_on: esp_thermostat_fan
      - lambda: |-
          if (id(esp_thermostat_temperature_sensor).state - id(esp_thermostat).target_temperature_high < esp32_thermostat::second_stage_activation_delta)
            id(esp_thermostat_cool_1).turn_on();
          else
            id(esp_thermostat_cool_2).turn_on();
    heat_action:
      - switch.turn_off: esp_thermostat_cool_1
      - lambda: |-
          if (id(esp_thermostat).target_temperature_low - id(esp_thermostat_temperature_sensor).state < esp32_thermostat::second_stage_activation_delta)
            id(esp_thermostat_heat_1).turn_on();
          else
            id(esp_thermostat_heat_2).turn_on();
    idle_action:
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_heat_1
      - lambda: |-
          if (id(esp_thermostat).fan_mode == climate::CLIMATE_FAN_AUTO)
            id(esp_thermostat_fan).turn_off();
    fan_only_action:
      - switch.turn_on: esp_thermostat_fan
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_heat_1
    fan_mode_auto_action:
      # - switch.turn_off: esp_thermostat_fan
      - lambda: |-
          if (!id(esp_thermostat_cool_1).state)
            id(esp_thermostat_fan).turn_off();
    fan_mode_on_action:
        - switch.turn_on: esp_thermostat_fan

binary_sensor:
  - platform: status
    id: esp_thermostat_api_status
    name: "Front Room Thermostat API Status"
  - platform: gpio
    id: esp_thermostat_motion_detection
    name: "Front Room Thermostat Motion Detection"
    pin:
      number: GPIO27
    on_state:
      then:
        - if:
            condition:
              switch.is_on: esp_thermostat_display_on_motion
            then:
              - script.execute: display_on
  - platform: gpio
    id: esp_thermostat_mode_button
    name: "Front Room Thermostat Mode Button"
    pin:
      number: GPIO0
      # mode: INPUT_PULLUP
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - lambda: 'esp32_thermostat::mode_button_click();'
        - component.update: main_lcd
        - script.execute: button_press
  - platform: gpio
    id: esp_thermostat_encoder_button
    name: "Front Room Thermostat Encoder Button"
    pin:
      number: GPIO2
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - lambda: 'esp32_thermostat::encoder_button_click();'
        - component.update: main_lcd
        - script.execute: button_press

sensor:
  # Phototransistor ADC sensor
  - platform: adc
    id: adc_sensor_phototransistor
    name: "Front Room Thermostat Phototransistor ADC"
    pin: 32
    attenuation: 11db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 3
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            const float display_brightness = id(adc_sensor_phototransistor).state / 3.9;
            id(main_lcd)->set_brightness(display_brightness);
  # NTC thermistor ADC sensor
  - platform: adc
    id: adc_sensor_thermistor
    name: "Front Room Thermostat Thermistor ADC"
    pin: 34
    internal: true
    update_interval: never
  # NTC thermistor resistance sensor
  - platform: resistance
    id: thermistor_sensor
    name: "Front Room Thermostat NTC Thermistor Resistance"
    sensor: adc_sensor_thermistor
    configuration: DOWNSTREAM
    # good value
    # reference_voltage: 0.83V
    # tweaked for front room installation
    reference_voltage: 0.82V
    resistor: 10kOhm
    internal: true
  # NTC thermistor sensor
  - platform: ntc
    id: esp_thermostat_thermistor_temperature
    name: "Front Room Thermostat NTC Thermistor Temperature"
    sensor: thermistor_sensor
    calibration:
      b_constant: 3380
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    filters:
      - sliding_window_moving_average:
          window_size: 8
          send_every: 1
          send_first_at: 1
  # DHT22 sensor
  - platform: dht
    pin: GPIO23
    model: DHT22
    temperature:
      name: "Front Room Thermostat DHT22 Temperature"
      id: esp_thermostat_dht22_temperature
      filters:
        - offset: -2.2
    humidity:
      name: "Front Room Thermostat DHT22 Humidity"
      id: esp_thermostat_dht22_humidity
    update_interval: 15s
  # BME280 sensor
  - platform: bme280
    address: 0x76
    temperature:
      id: esp_thermostat_bme280_temperature
      name: "Front Room Thermostat BME280 Temperature"
      filters:
        # good value
        # - offset: -0.5
        # tweaked for front room installation
        - offset: -1
    humidity:
      id: esp_thermostat_bme280_humidity
      name: "Front Room Thermostat BME280 Humidity"
    pressure:
      id: esp_thermostat_bme280_pressure
      name: "Front Room Thermostat BME280 Pressure"
    update_interval: 15s
  # SHTC3 sensor
  - platform: shtcx
    temperature:
      id: esp_thermostat_shtcx_temperature
      name: "Front Room Thermostat SHTC3 Temperature"
      filters:
        # good value
        # - offset: -1.25
        # tweaked for front room installation
        - offset: -1.7
    humidity:
      id: esp_thermostat_shtcx_humidity
      name: "Front Room Thermostat SHTC3 Humidity"
    update_interval: 15s
  # TMP117 sensor
  - platform: tmp117
    id: esp_thermostat_tmp117_temperature
    name: "Front Room Thermostat TMP117 Temperature"
    filters:
        # good value
        # - offset: -1.25
        # tweaked for front room installation
        - offset: -1.7
    update_interval: 15s
  # template sensor used for thermostat component
  - platform: template
    id: esp_thermostat_temperature_sensor
    name: "Front Room Thermostat Template Temperature Sensor"
    unit_of_measurement: "°C"
    lambda: 'return esp32_thermostat::thermostat_sensor_update();'
    update_interval: 15s
  # template sensor used for humidity
  - platform: template
    id: esp_thermostat_humidity_sensor
    name: "Front Room Thermostat Template Humidity Sensor"
    unit_of_measurement: "%"
    lambda: 'return id(esp_thermostat_bme280_humidity).state;'
    update_interval: 15s
  # Encoder sensor
  - platform: rotary_encoder
    id: esp_thermostat_encoder
    name: "Front Room Thermostat Encoder"
    pin_a: GPIO18
    pin_b: GPIO19
    on_value:
      then:
        - lambda: 'esp32_thermostat::encoder_value_change();'
        - component.update: main_lcd
        - script.execute: button_press

switch:
  # display control
  - platform: template
    id: esp_thermostat_display
    name: "Front Room Thermostat Display"
    turn_on_action:
      - script.execute: display_on
    turn_off_action:
      - lambda: 'id(main_lcd)->turn_off();'
    lambda: 'return id(main_lcd)->is_on();'
  # display control by motion
  - platform: template
    id: esp_thermostat_display_on_motion
    name: "Front Room Thermostat Display On Motion"
    optimistic: true
    restore_state: true
  # patch template switches to phyical switches so control is consistent
  - platform: template
    id: esp_thermostat_fan
    name: "Front Room Thermostat Fan"
    optimistic: true
  - platform: template
    id: esp_thermostat_cool_1
    name: "Front Room Thermostat Cool 1"
    optimistic: true
    turn_off_action:
      - switch.turn_off: esp_thermostat_cool_2
  - platform: template
    id: esp_thermostat_cool_2
    name: "Front Room Thermostat Cool 2"
    optimistic: true
    turn_on_action:
      - switch.turn_on: esp_thermostat_cool_1
  - platform: template
    id: esp_thermostat_heat_1
    name: "Front Room Thermostat Heat 1"
    optimistic: true
    turn_off_action:
      - switch.turn_off: esp_thermostat_heat_2
  - platform: template
    id: esp_thermostat_heat_2
    name: "Front Room Thermostat Heat 2"
    optimistic: true
    turn_on_action:
      - switch.turn_on: esp_thermostat_heat_1
  - platform: template
    id: esp_thermostat_humidify
    name: "Front Room Thermostat Humidify"
    optimistic: true
  # physical switches
  - platform: gpio
    id: esp_thermostat_dht22_vcc
    name: "Front Room Thermostat DHT22 Vcc"
    internal: true
    pin:
      number: 25
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_thermistor_vcc
    name: "Front Room Thermostat Thermistor Vcc"
    internal: true
    pin:
      number: 33
      mode: OUTPUT

# try OpenSansCondensed-Light.ttf
font:
  - file: "Helvetica.ttf"
    id: thermostat_large
    size: 24
  - file: "Helvetica.ttf"
    id: thermostat_medium
    size: 18
  - file: "Helvetica.ttf"
    id: thermostat_small
    size: 11
  - file: "Helvetica.ttf"
    id: thermostat_tiny
    size: 9

color:
  - id: color_mode
    white: 30%
  - id: color_action
    white: 75%
  - id: color_temp
    white: 100%
  - id: color_footer
    white: 20%
  - id: color_time
    white: 8%
  - id: color_highlight
    white: 90%
  - id: color_lowlight
    white: 8%

display:
  - platform: ssd1325_spi
    id: main_lcd
    model: "SSD1325 128x64"
    cs_pin: GPIO15
    dc_pin: GPIO16
    reset_pin: GPIO17
    pages:
      - id: main_screen
        lambda: 'esp32_thermostat::draw_main_screen(&it);'
      - id: setpoint_screen
        lambda: 'esp32_thermostat::draw_setpoint_screen(&it);'
      - id: mode_screen
        lambda: 'esp32_thermostat::draw_mode_screen(&it);'
      - id: temps_screen
        lambda: |-
          esp32_thermostat::draw_footer(&it, true);

          it.printf(0, 0, id(thermostat_small), id(color_mode), TextAlign::TOP_LEFT, "Other temperatures:");

          it.printf(0, 12, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "Bedroom:");
          it.printf(0, 22, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "Nook:");
          it.printf(0, 32, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "Outside:");

          it.printf(it.get_width(), 12, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(bedroom_temperature) * 1.8 + 32, id(bedroom_humidity));
          it.printf(it.get_width(), 22, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(front_room_nook_temperature) * 1.8 + 32, id(front_room_nook_humidity));
          it.printf(it.get_width(), 32, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(outside_temperature) * 1.8 + 32, id(outside_humidity));
      - id: sensors_screen
        lambda: |-
          // esp32_thermostat::draw_footer(&it, false);

          it.printf(0, 0, id(thermostat_small), id(color_mode), TextAlign::TOP_LEFT, "On-board sensor data:");

          it.printf(0, 12, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "BME280:");
          it.printf(0, 22, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "SHTC3:");
          it.printf(0, 32, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "DHT22:");
          it.printf(0, 42, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "TMP117:");
          it.printf(0, 52, id(thermostat_small), id(color_highlight), TextAlign::TOP_LEFT, "Thermistor:");

          it.printf(it.get_width(), 12, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(esp_thermostat_bme280_temperature).state * 1.8 + 32, id(esp_thermostat_bme280_humidity).state);
          it.printf(it.get_width(), 22, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(esp_thermostat_shtcx_temperature).state * 1.8 + 32, id(esp_thermostat_shtcx_humidity).state);
          it.printf(it.get_width(), 32, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°  %.1f%%", id(esp_thermostat_dht22_temperature).state * 1.8 + 32, id(esp_thermostat_dht22_humidity).state);
          it.printf(it.get_width() - 37, 42, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°", id(esp_thermostat_tmp117_temperature).state * 1.8 + 32);
          it.printf(it.get_width() - 37, 52, id(thermostat_small), id(color_highlight), TextAlign::TOP_RIGHT, "%.1f°", id(esp_thermostat_thermistor_temperature).state * 1.8 + 32);
